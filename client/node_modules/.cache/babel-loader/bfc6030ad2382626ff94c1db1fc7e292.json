{"remainingRequest":"/Users/zacharycrowell/Desktop/vue-network-scanner/client/node_modules/babel-loader/lib/index.js!/Users/zacharycrowell/Desktop/vue-network-scanner/server/index.js","dependencies":[{"path":"/Users/zacharycrowell/Desktop/vue-network-scanner/server/index.js","mtime":1571766912929},{"path":"/Users/zacharycrowell/Desktop/vue-network-scanner/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zacharycrowell/Desktop/vue-network-scanner/client/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3phY2hhcnljcm93ZWxsL0Rlc2t0b3AvdnVlLW5ldHdvcmstc2Nhbm5lci9jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczMvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Cgp2YXIgaW50ZXJuZXRBdmFpbGFibGUgPSByZXF1aXJlKCdpbnRlcm5ldC1hdmFpbGFibGUnKTsKCnZhciBzaSA9IHJlcXVpcmUoJ3N5c3RlbWluZm9ybWF0aW9uJyk7Cgp2YXIgd2lmaSA9IHJlcXVpcmUoJ25vZGUtd2lmaScpOwoKdmFyIGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7Cgp2YXIgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTsKCnZhciBhcHAgPSBleHByZXNzKCk7CnZhciBwb3J0ID0gMzAwMDsKYXBwLnVzZShjb3JzKCkpOwphcHAuZ2V0KCcvJywgZnVuY3Rpb24gKHJlcSwgcmVzKSB7CiAgcmVzLnNlbmQoewogICAgcmVzcG9uc2VNZXNzYWdlOiAnSGVsbG8nCiAgfSk7Cn0pOwphcHAuZ2V0KCcvbmV0d29ya3NjYW5vbmUnLAovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKAogIC8qI19fUFVSRV9fKi8KICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlcSwgcmVzKSB7CiAgICB2YXIgbmV0d29ya0RhdGE7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIG5ldHdvcmtEYXRhID0gc2kud2lmaU5ldHdvcmtzKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfY29udGV4dC50MCA9IHJlczsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBuZXR3b3JrRGF0YTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIF9jb250ZXh0LnQxID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIF9jb250ZXh0LnQwLnNlbmQuY2FsbChfY29udGV4dC50MCwgX2NvbnRleHQudDEpOwoKICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MikgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpOwphcHAuZ2V0KCcvbmV0d29ya3NjYW50d28nLAovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAvKiNfX1BVUkVfXyovCiAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIocmVxLCByZXMpIHsKICAgIHZhciBuZXR3b3JrRGF0YTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHdpZmkuaW5pdCh7CiAgICAgICAgICAgICAgaWZhY2U6IG51bGwgLy8gbmV0d29yayBpbnRlcmZhY2UsIGNob29zZSBhIHJhbmRvbSB3aWZpIGludGVyZmFjZSBpZiBzZXQgdG8gbnVsbAoKICAgICAgICAgICAgfSk7IC8vIFNjYW4gbmV0d29ya3MKCiAgICAgICAgICAgIG5ldHdvcmtEYXRhID0gd2lmaS5zY2FuKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IHJlczsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gbmV0d29ya0RhdGE7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgIF9jb250ZXh0Mi50MC5zZW5kLmNhbGwoX2NvbnRleHQyLnQwLCBfY29udGV4dDIudDEpOwoKICAgICAgICAgICAgcmVzLmVuZCgpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeDMsIF94NCkgewogICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpKTsKYXBwLmdldCgnL2N1cnJlbnRjb25uZWN0aW9uJywKLyojX19QVVJFX18qLwpmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgLyojX19QVVJFX18qLwogIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHJlcSwgcmVzKSB7CiAgICB2YXIgY3VycmVudENvbm5lY3Rpb247CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICB3aWZpLmluaXQoewogICAgICAgICAgICAgIGlmYWNlOiBudWxsIC8vIG5ldHdvcmsgaW50ZXJmYWNlLCBjaG9vc2UgYSByYW5kb20gd2lmaSBpbnRlcmZhY2UgaWYgc2V0IHRvIG51bGwKCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjdXJyZW50Q29ubmVjdGlvbiA9IHdpZmkuZ2V0Q3VycmVudENvbm5lY3Rpb25zKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gcmVzOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q29ubmVjdGlvbjsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIF9jb250ZXh0My50MSA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgX2NvbnRleHQzLnQwLnNlbmQuY2FsbChfY29udGV4dDMudDAsIF9jb250ZXh0My50MSk7CgogICAgICAgICAgICByZXMuZW5kKCk7CgogICAgICAgICAgY2FzZSA4OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMyk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94NSwgX3g2KSB7CiAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpOwphcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHsKICByZXR1cm4gY29uc29sZS5sb2coIlNlcnZlciBvbiB3YXluZSAiLmNvbmNhdChwb3J0LCAiISIpKTsKfSk7CgpmdW5jdGlvbiB3aWZpdGVzdCgpIHsKICB3aWZpLmluaXQoewogICAgaWZhY2U6IG51bGwgLy8gbmV0d29yayBpbnRlcmZhY2UsIGNob29zZSBhIHJhbmRvbSB3aWZpIGludGVyZmFjZSBpZiBzZXQgdG8gbnVsbAoKICB9KTsgLy8gU2NhbiBuZXR3b3JrcwoKICB2YXIgbmV0d29ya0RhdGEgPSB3aWZpLnNjYW4oKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICByZXR1cm4gZGF0YTsKICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpOwogIH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRlc3QoKSB7CiAgYWxlcnQoKTsKfTsgLy8gbW9kdWxlLmV4cG9ydHMgPSB7Ci8vICAgICB3aWZpdGVzdDogd2lmaXRlc3QsCi8vICAgICB0ZXN0OiB0ZXN0Ci8vIH0="},{"version":3,"sources":["/Users/zacharycrowell/Desktop/vue-network-scanner/server/index.js"],"names":["internetAvailable","require","si","wifi","cors","express","app","port","use","get","req","res","send","responseMessage","networkData","wifiNetworks","then","data","catch","error","console","init","iface","scan","err","end","currentConnection","getCurrentConnections","listen","log","wifitest","module","exports","test","alert"],"mappings":"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","sourcesContent":["const internetAvailable = require('internet-available')\nconst si = require('systeminformation');\nconst wifi = require('node-wifi')\n\n\n\nvar cors = require('cors');\n\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\napp.use(cors());\n\napp.get('/', (req, res) => {\n    res.send({responseMessage: 'Hello'})\n})\n\napp.get('/networkscanone', async(req, res) => {\n\n   let networkData =  si.wifiNetworks()\n    .then(data => {\n        return data\n    })\n    .catch(error => console.error(error));\n    res.send(await networkData)\n})\n\napp.get('/networkscantwo', async (req, res) => {\n     wifi.init({\n        iface: null // network interface, choose a random wifi interface if set to null\n      });\n       \n      // Scan networks\n     const networkData =  wifi.scan()\n     .then(data => {\n         return data\n     })\n     .catch(err => console.error(err))\n      res.send(await networkData)\n      res.end()\n})\n\napp.get('/currentconnection', async (req,res) => {\n\n    wifi.init({\n        iface: null // network interface, choose a random wifi interface if set to null\n      });\n\n    const currentConnection = wifi.getCurrentConnections()\n    .then(data => {\n        return data\n    })\n      res.send(await currentConnection)\n      res.end()\n})\n\n    app.listen(port, () => console.log(`Server on wayne ${port}!`))\n\n    function wifitest(){\n        wifi.init({\n            iface: null // network interface, choose a random wifi interface if set to null\n          });\n           \n          // Scan networks\n         const networkData =  wifi.scan()\n         .then(data => {\n             return data\n         })\n         .catch(err => console.error(err))\n    }\n\n    module.exports = function test(){\n        alert()\n    }\n\n    // module.exports = {\n    //     wifitest: wifitest,\n    //     test: test\n    // }"]}]}